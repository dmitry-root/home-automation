# Configuration for TI-ARM based projects.

.PHONY: build
default: build

BUILD_DIR := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))
BOARD ?= TM4C1294NCPDT
LINK_SCRIPT ?= $(BUILD_DIR)/$(BOARD).lds
BUILD_TYPE ?= RELEASE
CFG ?= $(wildcard *.cfg)
ADD_LIBS ?=

INCLUDES := $(addprefix -I,$(INCLUDES))
DEFINES := $(addprefix -D,$(DEFINES))

WORK_DIR := $(realpath $(shell pwd))
ROOT_DIR := $(abspath $(BUILD_DIR)/..)
WORK_SUBDIR := $(subst $(ROOT_DIR)/,,$(WORK_DIR))
OUTPUT_DIR := $(abspath $(ROOT_DIR)/../../output/firmware/ti)
OUTPUT := $(OUTPUT_DIR)/$(WORK_SUBDIR)

INCLUDES += "-I$(ROOT_DIR)/include" "-I$(WORK_DIR)"

# Function to get object file names from source file names
objects=$(addprefix $(OUTPUT)/,$(subst .c,.o,$(subst .cpp,.o,$1)))
depfiles=$(addprefix $(OUTPUT)/,$(subst .c,.d,$(subst .cpp,.d,$1)))

OBJECTS := $(call objects,$(SOURCES))
DEPFILES := $(call depfiles,$(SOURCES))
LIBPATHS := $(addprefix $(OUTPUT_DIR)/,$(ADD_LIBS))

# Include settings file first, then settings.local (that may overwrite some settings).
include $(wildcard $(BUILD_DIR)/settings $(BUILD_DIR)/settings.local)

XDCPATH = $(TIRTOS_INSTALLATION_DIR);$(BIOS_INSTALLATION_DIR);$(NDK_INSTALLATION_DIR);$(UIA_INSTALLATION_DIR);
COMMON_FLAGS := -I$(TIVAWARE_INSTALLATION_DIR) -D PART_$(BOARD) -D gcc -D TIVAWARE -mcpu=cortex-m4 -march=armv7e-m -mthumb -mfloat-abi=hard -mfpu=fpv4-sp-d16 -mabi=aapcs -ffunction-sections -fdata-sections -g -gstrict-dwarf -Wall
COMMON_FLAGS += $(INCLUDES)
COMMON_FLAGS += $(DEFINES)
COMMON_FLAGS += -I"$(NDK_INSTALLATION_DIR)/ti/ndk/inc/bsd" -D_POSIX_SOURCE
DEBUG_FLAGS = -O0
RELEASE_FLAGS = -Os

ifeq ($(BUILD_TYPE),DEBUG)
	BUILD_FLAGS := $(DEBUG_FLAGS) -D_DEBUG
else
	BUILD_FLAGS := $(RELEASE_FLAGS) -DNDEBUG
endif

CFLAGS := $(COMMON_FLAGS) $(BUILD_FLAGS)
CXXFLAGS := $(COMMON_FLAGS) $(BUILD_FLAGS) -fno-exceptions -fno-rtti

LFLAGS := -L$(TIVAWARE_INSTALLATION_DIR)/grlib/gcc -L$(TIVAWARE_INSTALLATION_DIR)/usblib/gcc -L$(TIVAWARE_INSTALLATION_DIR)/driverlib/gcc -lgr -lusb -ldriver -march=armv7e-m -mthumb -mfloat-abi=hard -mfpu=fpv4-sp-d16 -nostartfiles -static -Wl,--gc-sections -L$(BIOS_INSTALLATION_DIR)gnu/targets/arm/libs/install-native/arm-none-eabi/lib/armv7e-m/fpu -lgcc -lc -lm -lnosys

CC := "$(GCC_ROOT)/bin/arm-none-eabi-gcc"
CXX := "$(GCC_ROOT)/bin/arm-none-eabi-g++"
LNK := "$(GCC_ROOT)/bin/arm-none-eabi-gcc"
AR := "$(GCC_ROOT)/bin/arm-none-eabi-ar"
OBJCOPY := "$(GCC_ROOT)/bin/arm-none-eabi-objcopy"

export XDCPATH


# The following is included only when the project configuration file exists.
ifneq (x$(CFG),x)

PROJECT := $(subst .cfg,,$(CFG))
XDC_DIR := $(OUTPUT)/$(PROJECT)
XDC_TARGET := $(XDC_DIR)/linker.cmd
XDC_CFLAGS := $(CFLAGS)

$(XDC_DIR)/compiler.opt: $(XDC_TARGET)

$(XDC_TARGET): $(CFG) $(OUTPUT)
	$(XDCTOOLS_INSTALLATION_DIR)/xs xdc.tools.configuro -c "$(GCC_ROOT)" -t gnu.targets.arm.M4F -p ti.platforms.tiva:$(BOARD) --compileOptions "$(XDC_CFLAGS)" -o "$(XDC_DIR)" $(CFG)

LFLAGS := -Wl,-T,$(LINK_SCRIPT) -Wl,-Map,$(OUTPUT)/$(PROJECT).map -Wl,-T,$(XDC_TARGET) $(LFLAGS)
EXE := $(OUTPUT)/$(PROJECT).out
TARGET := $(OUTPUT)/$(PROJECT).bin

CFLAGS += "@$(XDC_DIR)/compiler.opt"
CXXFLAGS += "@$(XDC_DIR)/compiler.opt"

else

PROJECT := $(notdir $(WORK_DIR))
TARGET := $(OUTPUT)/lib$(PROJECT).a

ADD_FLAGS := \
	-I"$(TIRTOS_INSTALLATION_DIR)" \
	-I"$(BIOS_INSTALLATION_DIR)" \
	-I"$(NDK_INSTALLATION_DIR)" \
	-I"$(UIA_INSTALLATION_DIR)" \
	-I"$(XDCTOOLS_INSTALLATION_DIR)/packages" \
	-Dxdc_target_types__="gnu/targets/arm/std.h" \
	-Dxdc_target_name__=M4F

CFLAGS += $(ADD_FLAGS)
CXXFLAGS += $(ADD_FLAGS)

endif


# Common rules for building object files from sources

$(OUTPUT):
	mkdir -p $(OUTPUT)

.PHONY: clean
clean:
	rm -rf $(OUTPUT)

$(OUTPUT)/%.d: %.c
	@ mkdir -p `dirname $@`
	$(CC) $(CFLAGS) -MM -MP -MT $(<:%.c=$(OUTPUT)/%.o) -MF $@ $<
	echo "$(<:%.c=$(OUTPUT)/%.o): Makefile" >> $@

$(OUTPUT)/%.d: %.cpp
	@ mkdir -p `dirname $@`
	$(CXX) $(CXXFLAGS) -MM -MP -MT $(<:%.cpp=$(OUTPUT)/%.o) -MF $@ $<
	echo "$(<:%.cpp=$(OUTPUT)/%.o): Makefile" >> $@

$(OUTPUT)/%.o: %.c
	@ mkdir -p `dirname $@`
	$(CC) $(CFLAGS) $< -c -o $@

$(OUTPUT)/%.o: %.cpp
	@ mkdir -p `dirname $@`
	$(CXX) $(CXXFLAGS) $< -c -o $@

ifneq (x$(CFG),x)

$(EXE): $(OBJECTS) $(LIBPATHS) $(XDC_TARGET)
	$(LNK) $(OBJECTS) $(LIBPATHS) $(LFLAGS) -o $@

$(TARGET): $(EXE)
	$(OBJCOPY) -O binary -R .vtable $< $@

$(OBJECTS): $(XDC_DIR)/compiler.opt

else

$(TARGET): $(OBJECTS)
	$(AR) cru $@ $(OBJECTS)

endif

build: $(TARGET)

-include $(DEPFILES)
